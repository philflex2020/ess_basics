Notes on the dnp3 master.outstation interfaces.

The master station acts as a connection to an outstation.

A master can connect to one or more outstations.

The master can send control data to the outstations on an adhoc basis.
The master can receive data from the outstation either periodically or on an event basis.
The master will send one or more fims messages when it receives data from an outstation.
A master can be configured to scan the data from an outstation.

A connection between a master and an outstation is defined by a configuratoin file.
A fims message can be sent to the master to initiate a connection to an outstation. 
That message will contain the json configuration (or the configuration file name).

The configuration file will contain:
     the version number of the config file ( to allow rejection of incompatible versions)
    the ip address/port of the outstation
    the station number ,
    a description of the outstation.
    the frequency of class 0 scans (all data points)
    (a list of data types )
        A dataset for each data type

         each data type will have a list of tags initial values etc.

The config file dataset must be shared with the outstation.

DNP3 handles data items ordered by type and point index.
The point index is inferred by the position in the data set of the data type.
Hence the same data set must be shared between a master station and an outstation.
Note a method to ensure dataset integrity should be condisdered. 
Need to make sure that the master and outstation understand thedata set layout.

The data sets for each  DNP3 connection is managed by a data stack the datamapping is applied to the Outstation.
This needs to know the number of items for each data type.

The config map , is parsed , and the size of each data set (Binary, Analog) is used to set up the data maps for the DNP stack


    The master station has no knowledge of the data set available from each outstation.
    When data arrives at the master station it only knows the datatype and the point index of the data item.

However the config file IS important to translate the data items arriving from the outstation into the system tags required for 
the HybridOS components.

When setting up a masterstation line the transport  channel is first established.

// Connect via a TCPClient socket to a outstation
std::shared_ptr<IChannel> AddTCPClient(const std::string& id,
                                           int32_t levels,
                                           const asiopal::ChannelRetry& retry,
                                           const std::string& host,
                                           const std::string& local,
                                           uint16_t port,
                                           std::shared_ptr<IChannelListener> listener);
    Example

    auto channel = manager.AddTCPClient("tcpclient"
                                    , FILTERS
                                    , ChannelRetry::Default()
                                    , {IPEndpoint("127.0.0.1", 20001)}
                                    , "0.0.0.0"
                                    , PrintingChannelListener::Create()
                                    );

A "stack" is set up to manage aspects of the link

    // The master config object for a master. The default are
    // useable, but understanding the options are important.
    MasterStackConfig stackConfig;

    // you can override application layer settings for the master here
    // in this example, we've change the application layer timeout to 2 seconds
    stackConfig.master.responseTimeout = TimeDuration::Seconds(2);
    stackConfig.master.disableUnsolOnStartup = true;

    // You can override the default link layer settings here
    // in this example we've changed the default link layer addressing
    stackConfig.link.LocalAddr = 1;
    stackConfig.link.RemoteAddr = 10;

The master is then created 

    // Create a new master on a previously declared port, with a
    // name, log level, command acceptor, and config info. This
    // returns a thread-safe interface used for sending commands.
    auto master = channel->AddMaster("master",                                     // id for logging
                                     newSOEHandler::Create(cfgdb),                 // callback for data processing note we have added our cfgdb here.
                                     asiodnp3::DefaultMasterApplication::Create(), // master application instance
                                     stackConfig                                   // stack configuration
                                            );
The key here is the newSOEHandler, this is defined as such
/**
 * An interface for Sequence-Of-Events (SOE) callbacks from a master stack to
 * the application layer.
 *
 * A call is made to the appropriate member method for every measurement value in an ASDU.
 * The HeaderInfo class provides information about the object header associated with the value.
 *
 */

We create our own child object so that we can have the events arriving from the outstation and our data set connected.
In this way we can transfer the incoming values from the DNP3 data to the HybredOS system.
Here is a typical virtual void process provided to perform that function.

 virtual void Process(const HeaderInfo& info, const ICollection<Indexed<Binary>>& values) = 0;

In the example PrintingSOE handler we find this code.

void PrintingSOEHandler::Process(const HeaderInfo& info, const ICollection<Indexed<Binary>>& values)
{
    return PrintAll(info, values);
}

Here is a more detailed example  
void PrintingSOEHandler::Process(const HeaderInfo& /*info*/, const ICollection<Indexed<OctetString>>& values)
{
    auto print = [](const Indexed<OctetString>& pair) {
        std::cout << "OctetString "
                  << " [" << pair.index << "] : Size : " << pair.value.ToRSlice().Size() << std::endl;
    };

    values.ForeachItem(print);
}

The Process for binary data  would possibly look like this:

void PrintingSOEHandler::Process(const HeaderInfo& /*info*/, const ICollection<Indexed<Binary>>& values)
{
    auto print = [](const Indexed<Binary>& pair) {
        std::cout << "Binary "
                  << " [" << pair.index << "] : Value : " << pair.value << std::endl;
    };

    values.ForeachItem(print);
}

In our case we want to trigger a fims message once we have collected all the data items.
we have to get the sysCfg records into the inner loop
this is done using a static variable;
We also have to create the object inside the loop, use the first flag to trigger that.
then we create the pub message as we process the values.


void newSOEHandler::Process(const HeaderInfo& info, const ICollection<Indexed<Binary>>& values) {
    //std::cout << "******************************Bin: " <<std::endl;
    static sysCfg *static_cfgdb = cfgdb;
    static cJSON *cj; 
    static int first = 1;
    auto print = [](const Indexed<Binary>& pair) {
        if(first == 1)
        {
            cj = cJSON_CreateObject();
            first = 0;
        }
        char* vname = static_cfgdb->getBinary(pair.index);
        if(strcmp(vname,"Unknown")!= 0) 
        {
            cJSON_AddNumberToObject(cj, vname, pair.value.value);
        }
    };
    values.ForeachItem(print);
    first = 1;
    //Code for adding timestamp
    if(cj)
    {
        addCjTimestamp(cj, "Timestamp");
        char *out = cJSON_PrintUnformatted(cj);
        cJSON_Delete(cj);
        cj = NULL;
        // todo create the pub uri
        cfgdb->p_fims->Send("pub", "/mypub/message", NULL, out);
        free(out);
    }
    //std::cout << "******************************Bin: <<" <<std::endl;
}

And for the Analog data.

void newSOEHandler::Process(const HeaderInfo& info, const ICollection<Indexed<Analog>>& values) {
    //std::cout << "******************************Bin: " <<std::endl;
    static sysCfg *static_cfgdb = cfgdb;
    static cJSON *cj; 
    static int first = 1;
    auto print = [](const Indexed<Analog>& pair) {
        if(first == 1)
        {
            cj = cJSON_CreateObject();
            first = 0;
        }
        char* vname = static_cfgdb->getAnalog(pair.index);
        if(strcmp(vname,"Unknown")!= 0) 
        {
            cJSON_AddNumberToObject(cj, vname, pair.value.value);
        }
    };
    values.ForeachItem(print);
    first = 1;
    //Code for adding timestamp
    if(cj)
    {
        addCjTimestamp(cj, "Timestamp");
        char *out = cJSON_PrintUnformatted(cj);
        cJSON_Delete(cj);
        cj = NULL;
        // todo create the pub uri
        cfgdb->p_fims->Send("pub", "/mypub/message", NULL, out);
        free(out);
    }
    //std::cout << "******************************An: <<" <<std::endl;
}



The cfgdb is the structure that was created from the  configuration parser.

At this time the cfgdb structure is owned by he DNP3 process. allowing the system to update values in a thread safe manner.


The Master can set up to scan the outstation at regular intervals.

    // do an integrity poll (Class 3/2/1/0) once per minute
    auto integrityScan = master->AddClassScan(ClassField::AllClasses(), TimeDuration::Minutes(1));

    // do a Class 1 exception poll every 5 seconds
    auto exceptionScan = master->AddClassScan(ClassField(ClassField::CLASS_1), TimeDuration::Seconds(20));

    // do an Analog (group 30,1 ) scan every 10 seconds
    auto objscan = master->AddAllObjectsScan(GroupVariationID(30,1),
                                                                   TimeDuration::Seconds(10));

    Once these scan objects have been set up they can be triggered on demand.

    exceptionScan->Demand();
    objscan->Demand();

Notes on input data types


// Binary Input - Any Variation
struct Group1Var0

// Binary Input - Packed Format
struct Group1Var1

// Binary Input - With Flags
struct Group1Var2

// Binary Input Event - Any Variation
struct Group2Var0

// Binary Input Event - Without Time
struct Group2Var1

// Binary Input Event - With Absolute Time
struct Group2Var2

// Binary Input Event - With Relative Time
struct Group2Var3

// Analog Input - Any Variation
struct Group30Var0
{
  static GroupVariationID ID() { return GroupVariationID(30,0); }
};

// Analog Input - 32-bit With Flag
struct Group30Var1
  typedef int32_t ValueType;

// Analog Input - 16-bit With Flag
struct Group30Var2
  typedef int16_t ValueType;

// Analog Input - 32-bit Without Flag
struct Group30Var3
  typedef int32_t ValueType;

// Analog Input - 16-bit Without Flag
struct Group30Var4
  Group30Var4();
  typedef int16_t ValueType;

// Analog Input - Single-precision With Flag
  Group30Var5();
  typedef float ValueType;

// Analog Input - Double-precision With Flag
  Group30Var6();
  typedef double ValueType;


Group 32 are the same but for Analog Input Events.

Notes on output data types

// Analog Output Status - Any Variation
struct Group40Var0

// Analog Output Status - 32-bit With Flag
struct Group40Var1

// Analog Output Status - 16-bit With Flag
struct Group40Var2
  typedef int16_t ValueType;

// Analog Output Status - Single-precision With Flag
struct Group40Var3
  typedef float ValueType;

// Analog Output Status - Double-precision With Flag
struct Group40Var4
  typedef double ValueType;

// Analog Output - Any Variation
struct Group41Var0


// Analog Output - 32-bit With Flag
struct Group41Var1
  typedef int32_t ValueType;
 
// Analog Output - 16-bit With Flag
struct Group41Var2
  typedef int16_t ValueType;

// Analog Output - Single-precision
  typedef float ValueType;

// Analog Output - Double-precision
struct Group41Var4
  typedef double ValueType;


For the DNP3 interface, we are expecting the following object groups, data types and variations. Please confirm APX’s DNP3 client’s compatibility or if you have some other preference.
Function        Description          Object Group              Data Type Variation 
Analog Output   Commands to sites    40 (read), 41 (write)     int32     1
Binary Output   Commands to sites    10 (read), 12 (write)     bit       1
Analog Input    Telemetry from sites 30                        int32     3
Binary Input    Telemetry from sites 1                         bit       1

Q1 how is an analog (or any other) event triggered
event
The crossing of a threshold by an analog value, or the switch of a binary
input. For example, an event occurs when an analog value changes by
more than the configured dead-band or threshold, or when a binary input
changes from On to Off.
An event can be recorded with or without a timestamp. Timestamps
enable the master to generate time-sequence reports.
Event data are kept in the datalogger until confirmation has been received
from the master that the data are received. In other words, event data will
not be discarded until after the datalogger receives confirmation that the
master has received the data.


Q2 how is an analog (or any other) event scanned 

not sure but a class 1-3 scan may do the trick
DNPVariable(Array(),4,30,1,0,0,0,0) 'static analog data
 'must specify object 30 before using object 32
 DNPVariable(Array(),4,32,1,1,0,trigger,10) 'event analog data
  fims messages can be used to trigger these requests.


  The master station can also set individual values on the outstation.

  This is done using a similar operation to data collecting.
      cfgdb->setVal(Type, Name, Value);

      the code to do this would be something like this:
         int idx = cfgdb->getAnalogIndex(Name)
         if (Type == AnalogOP){
            AnalogOutputInt16 ao(Value);
            master->DirectOperate(CommandSet(
                {WithIndex(ao, idx)}), PrintingCommandCallback::Get());
         }

Note that PrintingCommandCallback looks like this just for reference

opendnp3::CommandCallbackT PrintingCommandCallback::Get()
{
    return [](const ICommandTaskResult& result) -> void {
        std::cout << "Received command result w/ summary: " << TaskCompletionToString(result.summary) << std::endl;
        auto print = [](const CommandPointResult& res) {
            std::cout << "Header: " << res.headerIndex << " Index: " << res.index
                      << " State: " << CommandPointStateToString(res.state)
                      << " Status: " << CommandStatusToString(res.status);
        };
        result.ForeachItem(print);
    };
}

Configuration file 
The json config file will probably look like this.

{
    "fileInfo": {
        "sourceFileName": "dnp3_outstation.xlsx",
        "sourceFileCreated": "2020-01-02T21:16:38.000Z",
        "sourceFileLastModified": "2020-05-05T16:29:07.000Z",
        "sourceFileCreatedBy": "Microsoft Office User",
        "sourceFileLastModifiedBy": "pmiller",
        "outputFileName": "dnp3_outstation.json",
        "outputFileType": "server",
        "outputFileCreated": "2020-05-05T16:29:13.344Z"
    },
    "system": {
        "protocol": "DNP3",
        "version": 1,
        "id": "dnp3_outstation",
        "ip_address": "192.168.1.50",
        "port": 502,
        "local_address": 1,
		"remote_address": 10
    },
    "objects": {
        "binary": [
            {
                "id": "voltage_regulator",
                "offset": 0,
                "name": "Voltage Regulator"
            },
            {
                "id": "power_system_stabilizer",
                "offset": 1,
                "name": "Power System Stabilizer"
            },
            {
                "id": "gen_resource_switches",
                "offset": 2,
                "name": "Generation Resource Switches"
            },
            {
                "id": "gen_resource_breaker_status",
                "offset": 3,
                "name": "Generation Resource Breaker Status"
            },
            {
                "id": "gen_virtual_breaker_status",
                "offset": 4,
                "name": "Gen Virtual Breaker Status"
            }
        ],
        "analog": [
            {
                "id": "line_flows_mw",
                "offset": 0,
                "name": "Line flows MW",
                "unit": "MW",
                "signed": true
            },
            {
                "id": "line_flows_mv",
                "offset": 1,
                "name": "Line flows MV",
                "unit": "MW",
                "signed": true
            },
            {
                "id": "voltage",
                "offset": 2,
                "name": "Voltage",
                "unit": "kV",
                "signed": true
            },
            {
                "id": "plant_auxiliary_load_mw",
                "offset": 3,
                "name": "Plant Auxiliary Load MW",
                "unit": "MW",
                "signed": true
            },
            {
                "id": "plant_auxiliary_load_mv",
                "offset": 4,
                "name": "Plant Auxiliary Load MV",
                "unit": "MV",
                "signed": true
            }
        ]
    }
}

This file determines that binary data item 3 is  "gen_resource_breaker_status"
In addition there are 5 anlaog and 5 binary data points for this system.

Outstation

Unlike the Master,  the Outstation stack has a data storage area for data values.

The outstation reads the same config file and extracts the number of data points for each data type.                                                                        );
Note that the order in the stack configuration is fixed, the position determines the data type.

OutstationStackConfig stack(
	DatabaseSizes(
		cfgdb.binary.size(),  // binary input
		0,                     // double binary input
		cgdb.analog.size(),    // analog  input
		0,                     // counter input
		0,                     // frozen counter
		cfgdb.binaryop.size(), // binary output status 
		0,                     // analog output status
		0,                     // time and intervat
		0                      // octet string
		)
);

In addition, options for each item in the datatype arrays can be modified.
This will change the function and classification of the object to allow it to be included in specified scans etc.
The data type of the object cannot be changed.
(Note perhaps we can add a tag here I dont know yet)

Note 2: this is where the data types of the value recovered in a class scan are set 
for example Group30Var5 means send floating point.
 
void ConfigureDatabase(DatabaseConfig& config)
{
    // example of configuring analog index 0 for Class2 with floating point variations by default
    config.analog[0].clazz = PointClass::Class2;
    config.analog[0].svariation = StaticAnalogVariation::Group30Var5;
    config.analog[0].evariation = EventAnalogVariation::Group32Var7;
}

The outstation creates a listner channel.  
// Create a TCP server (listener) with the port number from the config file
    auto channel = manager.AddTCPServer(cfg.name, FILTERS, ServerAcceptMode::CloseExisting, "0.0.0.0", cfg.port,
                                        PrintingChannelListener::Create());

The channel then attaches one or more outstations, each with their own data (stack) config and command handler.
The outstations are identified by the local address ( 10 ) in this case.


// The main object for a outstation. The defaults are useable,
    // but understanding the options are important.
    // fixed sizes here the sample above shows how to provide custom sizes.
    OutstationStackConfig config(DatabaseSizes::AllTypes(10));

    // Specify the maximum size of the event buffers
    config.outstation.eventBufferConfig = EventBufferConfig::AllTypes(10);

    // you can override an default outstation parameters here
    // in this example, we've enabled the oustation to use unsolicted reporting
    // if the master enables it
    config.outstation.params.allowUnsolicited = true;

    // You can override the default link layer settings here
    // in this example we've changed the default link layer addressing
    config.link.LocalAddr = 10;
    config.link.RemoteAddr = 1;

    config.link.KeepAliveTimeout = openpal::TimeDuration::Max();

    // You can optionally change the default reporting variations or class assignment prior to enabling the outstation
    ConfigureDatabase(config.dbConfig);

    // Create a new outstation with a log level, command handler, and
    // config info this	returns a thread-safe interface used for
    // updating the outstation's database.
    //auto outstation = channel->AddOutstation("outstation", SuccessCommandHandler::Create(),
    //                                         DefaultOutstationApplication::Create(), config);

    auto outstation = channel->AddOutstation("outstation", commandHandler,
                                             DefaultOutstationApplication::Create(), config);
The command handler is used to handle the interface from DNP3 to the real world.

This include file will determine the data types accepted by this outstation
unsupported data types are managed with a NOT_SUPPORTED return from the data handlers.

{ return opendnp3::CommandStatus::NOT_SUPPORTED; }


Note that outputs have to handle two types of command 
SELECT and OPERATE 
When in the OPERATE function the OperateType argument is important.
( from cpp/libs/include/opendnp3/gen)

enum class OperateType : uint8_t
{
  /// The outstation received a valid prior SELECT followed by OPERATE
  SelectBeforeOperate = 0x0,
  /// The outstation received a direct operate request
  DirectOperate = 0x1,
  /// The outstation received a direct operate no ack request
  DirectOperateNoAck = 0x2
};



class MyCommandHandler final : public opendnp3::ICommandHandler
{

public:
    MyCommandHandler(system_map *mymap);

    void Start() override {}
    void End() override {}

    opendnp3::CommandStatus Select(const opendnp3::ControlRelayOutputBlock& command, uint16_t index) override;

    opendnp3::CommandStatus Operate(const opendnp3::ControlRelayOutputBlock& command, uint16_t index, opendnp3::OperateType opType) override;

    opendnp3::CommandStatus Select(const opendnp3::AnalogOutputInt16& command, uint16_t index) override;
    //{ return opendnp3::CommandStatus::NOT_SUPPORTED; }

    opendnp3::CommandStatus Operate(const opendnp3::AnalogOutputInt16& command, uint16_t index, opendnp3::OperateType opType) override;
    //{ return opendnp3::CommandStatus::NOT_SUPPORTED; }

    opendnp3::CommandStatus Select(const opendnp3::AnalogOutputInt32& command, uint16_t index) override
    { return opendnp3::CommandStatus::NOT_SUPPORTED; }

    opendnp3::CommandStatus Operate(const opendnp3::AnalogOutputInt32& command, uint16_t index, opendnp3::OperateType opType) override
    { return opendnp3::CommandStatus::NOT_SUPPORTED; }

    opendnp3::CommandStatus Select(const opendnp3::AnalogOutputFloat32& command, uint16_t index) override
    { return opendnp3::CommandStatus::NOT_SUPPORTED; }

    opendnp3::CommandStatus Operate(const opendnp3::AnalogOutputFloat32& command, uint16_t index, opendnp3::OperateType opType)
    { return opendnp3::CommandStatus::NOT_SUPPORTED; }

    opendnp3::CommandStatus Select(const opendnp3::AnalogOutputDouble64& command, uint16_t index) override
    { return opendnp3::CommandStatus::NOT_SUPPORTED; }

    opendnp3::CommandStatus Operate(const opendnp3::AnalogOutputDouble64& command, uint16_t index, opendnp3::OperateType opType)
    { return opendnp3::CommandStatus::NOT_SUPPORTED; }

private:

    system_map *cfgdb;
};


A typical function to service an output request would look like this:

the command control codes are defined in 

/**
  Defines the interoperable values of the Control Code
  Refer to pages 506-510 of 1815 for a full description
*/
enum class ControlCode : uint8_t
{
  /// Does not initiate an action or change an in-progress or pending command.
  NUL = 0x0,
  
  /// Cancel in-progress and pending commands. Take no additional action.
  NUL_CANCEL = 0x20,
  
  /// For activation model, set output to active for the duration of the On-time. For both complementary models, return NOT_SUPPORTED stat
us.
  PULSE_ON = 0x1,
  
  /// Cancel in-progress and pending commands, process the remainder of the fields as if the control code were PULSE_ON
  PULSE_ON_CANCEL = 0x21,
  
  /// Non-interoperable code. Do not use for new applications. return NOT_SUPPORTED
  PULSE_OFF = 0x2,
  
  /// Non-interoperable code. Do not use for new applications. Cancel in-progress and pending commands, process remainder of fields as if
the control code were PULSE_OFF
  PULSE_OFF_CANCEL = 0x22,
  
  /// For activation model, set output to active for the duration of the On-time. For complementary latch model, set the output to active.
 For complementary two-output model, set the close output to active for the duration of the On-time.
  LATCH_ON = 0x3,
  
  /// Cancel in-progress and pending commands, process the remainder of the fields as if the control code were LATCH_ON.
  LATCH_ON_CANCEL = 0x23,
  
  /// For activation model, set output to active for the duration of the On-time. For complementary latch model, set the output to inactiv
e. For complementary two-output model, set the trip output to active for the duration of the On-time.
  LATCH_OFF = 0x4,
  
  /// Cancel in-progress and pending commands, process the remainder of the fields as if the control code were LATCH_OFF.
  LATCH_OFF_CANCEL = 0x24,
  
  /// For activation model, set output to active for the duration of the On-time. For complementary latch model, set the output to active.
 For complementary two-output model, set the close output to active for the duration of the On-time.
  CLOSE_PULSE_ON = 0x41,
  
  /// Cancel in-progress and pending commands, process the remainder of the fields as if the control code were CLOSE_PULSE_ON.
  CLOSE_PULSE_ON_CANCEL = 0x61,
  
  /// For activation model, set output to active for the duration of the On-time. For complementary latch model, set the output to inactiv
e. For complementary two-output model, set the trip output to active for the duration of the On-time.
  TRIP_PULSE_ON = 0x81,
  
  /// Cancel in-progress and pending commands, process the remainder of the fields as if the control code were TRIP_PULSE_ON.
  TRIP_PULSE_ON_CANCEL = 0xA1,
  
  ///  undefined command (used by DNP standard)
  UNDEFINED = 0xFF
};

The structure is set up to include the system_map (cfgb) in the control object.

MyCommandHandler::MyCommandHandler(system_map* cfg)
{
    cfgdb = cfg;

}
An operate command on a control relay output block would be serviced like this.
The function GetIoAndState would look up te io point in the cfgb and also recover the state or value for the write.

CommandStatus MyCommandHandler::Operate(const ControlRelayOutputBlock& command, uint16_t index, OperateType opType)
{
    uint8_t io = 0;
    bool state = false;
    std::cout << "              ************" << __FUNCTION__ << " called index:" <<index << std::endl;

    auto ret = GetIoAndState(index, TypeCROB, command.functionCode, io, state);

    if(ret == CommandStatus::SUCCESS)
    {
        std::cout <<" operate on io point " << (int)io <<std::endl;
        SystemOutputWrite(io, state);
    }

    return ret;
}


CommandStatus MyCommandHandler::Select(const ControlRelayOutputBlock& command, uint16_t index)
{
    uint8_t io = 0;
    bool state = false;
    std::cout << "               ************" <<__FUNCTION__ << " called index:" <<index << std::endl;
    return GetIOAndState(index,TypeCROB,  command.functionCode, io, state);
}


